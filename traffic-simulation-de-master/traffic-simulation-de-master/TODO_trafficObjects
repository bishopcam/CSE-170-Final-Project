class: 
TrafficObjects unifies ObstacleTLDepot.js and SpeedFunnel.js

(2019-10-02)
Nearly finished!!
2 bugs still there

(1) 3 instead of 2 signs drawn OK

(2) traffic light cannot be switched still BUG

(3) obj deactivate if only clicked, not dragged: wrong!

use isDragged: Deactivate objects on road only if isDragged=true;
               Don't set isDragged=false in TrafficObjects! that is
	       the responsibility of canvas_gui!
         onmousemove="handleMouseMove(event)"
          onmousedown="handleMouseDown(event)"
          onmouseup="handleMouseUp(event)" 
          onclick="handleClick(event)"

(4) du in TrafficObjects.js erroneously also used for traffic
lights/signs OK
	       
===================================================

GENERAL

Main data element: 
an array traffObj[].  Each traffObj[i] has elements as in ObstacleTLDepot.js
* id: unique ID
* type: one of "speedLimit", "trafficLight", "obstacle"
  there are nObj=nObst+nTL+nSpeedl objects
* isActive: if dropped onto a road (otherwise, it is in the depot or
  dragged or zooming back)
* value: speedlimit_ms, "red"/"green", or "n.a." (if obstacle) 
* road (reference if active, null otherwise)

Main methods:

(0) constructor defining nObst+nTL+nSpeedl


(1) graphical operations such as drag, zoomBack reuse from
SpeedFunnel, not ObstacleTL


(2a) selectByUser(xPixUser, yPixUser, distCritPix)
     -> [success, 'null' or object]
     * take directly from ObstacleDepot.pickObject
     
(2b) selectById(id)
     -> [success, 'null' or object]

[(2c) selectByRoadCoords(road,u,v)]


(3a) activateObject(object, road)
* sets object.road reference
* if object.type==='trafficLight' then road.addTrafficLight(object)
* (optionally) calls road.updateTrafficObjects(this) (not necessary
since done timestep oriented in next timestep anyway)

calls appropriate road.activateTrafficLight, road.activateSpeedLimit,
road.putObstacle according to the type and the value (creates special vehicle
objects and/or propagate parameters to the vehicle models).
The road and object are known from the callers:
(i) mouse drop->dropObject method
(ii) programmatic activation during the initialization


(3b) deactivateObject(object) 
calls appropriate road.deactivate* routines if object id is active
(then, it knows "his" road)



(4) road.updateTrafficObjects(this)

 * Special case: called in main simulation loop
   timestep-based (needed for speed limits etc when vehs cross the u
   coordinate of an object)

 * timestep-based, not event-oriented=> road is
   caller, not trafficObjects.

 * Up to now completely covered in road.prototype.updateSpeedFunnel






GUI callbacks


(5a) onmousedown callback: pickObject(xPixUser, yPixUser, distCritPix)
  -> [success, null or object]
     
  * template from ObstacleTLDepot.js
     
  * uses selectByUser
  
  * if success -> object defined{

    * if object.inDepot, just change internal state (isDragged etc)

    * if (object.isActive&&(object.type==='trafficLight))
      then object.isActive=false; road.removeTrafficLight(object.id)

    * if (object.isActive&&(object.type==='trafficLight))
      then object.isActive=false; road.removeObstacle(object.id)


(5b) onmouseup callback: dropObject(object, xPixUser, yPixUser,
  distCritPix, network)

  * determines nearest road from network -> road

  * if !nearer to road center than distCritPix -> zoomback

  * if nearer than distCritPix:

    * set isActive=true;
    
    * calculate u,v from graphics (shift by one obstacle  length for
      obstacles)

    * if object.type==='obstacle' then road.dropDepotObject(...)
      -> road.dropObject

    * if object.type==='trafficLight' then road.addTrafficLight(object)
      -> road.dropObject

    * if object.type==='speedLimit' no action needed because of
      timestep-based road.updateSpeedFunnel (in contrast to obstacles
      and TLs, speed limits do not introduce vehicle-like objects but
      change the vehicle model characteristics themselves)
      -> road.dropObject


(5c) onclick callback: changeValue(object,newValue)

  * sets new value

  * sets isActive (indirectly new graphical appearance) if applicable

  * If object.isActive&&(object.type==='trafficLight'),
    road.changeTrafficLight(object.id, object.value)

  * change of speed limit taken care of by road.updateTrafficObject in
    next timestep



